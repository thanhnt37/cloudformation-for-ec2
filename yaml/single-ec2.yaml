AWSTemplateFormatVersion: 2010-09-09
Description: A sample template

Parameters:
  AppName:
    Description: application-name or project-name
    Type: String
    Default: mautic

  EnvironmentCode:
    Description: prod || stag || dev
    Type: String
    Default: dev

  VpcCIDR:
    Type: String
    Default: 192.168.0.0/16

  PublicSubnet1CIDR:
    Description: the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 192.168.10.0/24

  PublicSubnet2CIDR:
    Description: the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 192.168.11.0/24

  PrivateSubnet1CIDR:
    Description: the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 192.168.20.0/24

  PrivateSubnet2CIDR:
    Description: the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 192.168.21.0/24

  KeyPairName:
    Description: Key Pair for EC2
    Type: 'AWS::EC2::KeyPair::KeyName'

Conditions:
  isProduction: !Equals [!Ref EnvironmentCode, "prod"]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${EnvironmentCode}-vpc'

# khởi tạo và gắn Internet Gateway vào cho VPC, cho phép truy cập internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentCode

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# giả sử VPC này có 2 public subnet nằm ở 2 Availability Zone khác nhau
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true

# khởi tạo route table và public route đi ra internet cho public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

# gán public route cho các public subnet
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# configuration for EC2 instance
# security_group + elastic IP --> network_interface --> ec2
  SSHInboundSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22

  HTTPInboundSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP access via user defined port
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80

  HTTPSInboundSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTPs access via user defined port
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443

  RDSOutboundSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable database access to RDS
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306

  RDSInboundSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable database access
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306

  NetworkInterface1ForPublicSubnet1:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref PublicSubnet1
      GroupSet:
        - !Ref SSHInboundSG
        - !Ref HTTPInboundSG
        - !Ref HTTPSInboundSG
        - !Ref RDSOutboundSG
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${EnvironmentCode}-eni-1-for-subnet-1'

  NetworkInterface1ForPublicSubnet2:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref PublicSubnet2
      GroupSet:
        - !Ref SSHInboundSG
        - !Ref HTTPInboundSG
        - !Ref HTTPSInboundSG
        - !Ref RDSOutboundSG
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${EnvironmentCode}-eni-1-for-subnet-2'

  # đối với EIPAssociation: nếu EC2 chỉ có 1 network_interface thì gán nó vào network_interface hay ec2 đều được
  # nhưng nếu ec2 có nhiều network_interface, thì cần chỉ ra 1 NetworkInterfaceId
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip-association.html
  NetworkInterface1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  EIPAssociationForNetworkInterface1:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt NetworkInterface1EIP.AllocationId
      NetworkInterfaceId: !Ref NetworkInterface1ForPublicSubnet1

# một số thông tin khác ko cần khai báo như AZ, security_group, subnet ... ????
# nó sẽ tự động ăn theo network_interface
# NetworkInterfaceAttachment là không cần thiết
  EC2Instance1ForSubnet1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !If [ isProduction, "t3.xlarge", "t3.large" ]
      ImageId: ami-0cf14aecde598bc8f
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref NetworkInterface1ForPublicSubnet1
          DeviceIndex: 0
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash -xe
          sudo yum update -y
          sudo yum install -y httpd
          sudo usermod -a -G apache ec2-user
          sudo chown -R ec2-user:apache /var/www
          sudo chmod 2775 /var/www
          find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 0664 {} \;
          sudo systemctl start httpd
          echo "<h1>Hello message from EC2Instance 1 For Subnet 1</h1>" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${EnvironmentCode}-ec2-instance-1-for-subnet-1'

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
