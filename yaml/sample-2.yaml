# ở sample 1 thì mỗi ec2 instance sẽ có truy cập 2 chiều với internet thông qua Internet Gateway đã được gán vào VPC

# nhưng khi gán thêm ELB vào VPC thì các yêu cầu truy cập web server trên ec2 instance sẽ đi vào từ Internet Gateway sau đó tới ELB,
# sau đó ELB sẽ quyết định chuyển request đó tới ec2 instance nào để xử lý.

# còn khi sử dụng Cloudfront để phân phối dịch vụ web, luồng truy cập của người dùng sẽ thay đổi. Nó sẽ tới Cloudfront trước,
# sau đó Cloudfront sẽ chuyển yêu cầu tới ELB như là 1 origin của Cloudfront, sau đó ELB sẽ quyết định ec2 instance nào sẽ xử lý request.
# Tuy nhiên, Cloudfront chỉ xử lý yêu cầu 1 chiều từ user qua internet vào tới ec2. Còn nếu ec2 instance muốn truy cập internet (vd để tải về các thư viện khác) thì nó sẽ cần Internet Gateway để truy cập internet.

AWSTemplateFormatVersion: 2010-09-09
Description: A sample template

Parameters:
  EnvironmentCode:
    Description: prod || stag || dev
    Type: String

  VpcCIDR:
    Type: String
    Default: 192.168.0.0/16

  PublicSubnet1CIDR:
    Description: the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 192.168.1.0/24

  PublicSubnet2CIDR:
    Description: the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 192.168.2.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub 'mautic-${EnvironmentCode}-vpc'

# khởi tạo và gắn Internet Gateway vào cho VPC, cho phép truy cập internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentCode

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# giả sử VPC này có 2 public subnet nằm ở 2 Availability Zone khác nhau
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true

# khởi tạo route table và public route đi ra internet cho public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

# gán public route cho các public subnet
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# configuration for EC2 instance
# security_group + elastic IP --> network_interface --> ec2
  SSHAccessSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22

  HTTPAccessSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP access via user defined port
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80

  HTTPSAccessSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTPs access via user defined port
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443

  NetworkInterface1ForPublicSubnet1:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref PublicSubnet1
      GroupSet:
        - !Ref SSHAccessSecurityGroup
        - !Ref HTTPAccessSecurityGroup
        - !Ref HTTPSAccessSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'mautic-${EnvironmentCode}-eni-1-for-subnet-1'

  NetworkInterface1ForPublicSubnet2:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref PublicSubnet2
      GroupSet:
        - !Ref SSHAccessSecurityGroup
        - !Ref HTTPAccessSecurityGroup
        - !Ref HTTPSAccessSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'mautic-${EnvironmentCode}-eni-1-for-subnet-2'

# một số thông tin khác ko cần khai báo như AZ, security_group, subnet ... ????
# nó sẽ tự động ăn theo network_interface
# NetworkInterfaceAttachment là không cần thiết
  EC2Instance1ForSubnet1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.large
      ImageId: ami-0cf14aecde598bc8f
      KeyName: mautic_development # key_pair name
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref NetworkInterface1ForPublicSubnet1
          DeviceIndex: 0
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash -xe
          sudo yum update -y
          sudo yum install -y httpd
          sudo usermod -a -G apache ec2-user
          sudo chown -R ec2-user:apache /var/www
          sudo chmod 2775 /var/www
          find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 0664 {} \;
          sudo systemctl start httpd
          echo "<h1>Hello message from EC2Instance 1 For Subnet 1</h1>" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: !Sub 'mautic-${EnvironmentCode}-ec2-instance-1-for-subnet-1'

  EC2Instance1ForSubnet2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.large
      ImageId: ami-0cf14aecde598bc8f
      KeyName: mautic_development # key_pair name
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref NetworkInterface1ForPublicSubnet2
          DeviceIndex: 0
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash -xe
          sudo yum update -y
          sudo yum install -y httpd
          sudo usermod -a -G apache ec2-user
          sudo chown -R ec2-user:apache /var/www
          sudo chmod 2775 /var/www
          find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 0664 {} \;
          sudo systemctl start httpd
          echo "<h1>Hello message from EC2Instance 1 For Subnet 2</h1>" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: !Sub 'mautic-${EnvironmentCode}-ec2-instance-1-for-subnet-2'

# elastic load balancer
  ElasticLoadBalancerForApp:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'mautic-${EnvironmentCode}-elb-for-app'
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SSHAccessSecurityGroup
        - !Ref HTTPAccessSecurityGroup
        - !Ref HTTPSAccessSecurityGroup

# một elb có thể có nhiều target_group
# mỗi target_group nên có các instances trải đều trên cái availability_zone ?
  ELBTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'mautic-${EnvironmentCode}-target-group-1'
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      ProtocolVersion: HTTP1
      TargetType: instance
      Targets:
        - Id: !Ref EC2Instance1ForSubnet1
        - Id: !Ref EC2Instance1ForSubnet2

# Listener
  HTTPListenerForALB:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancerForApp
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref ELBTargetGroup1 # To route to one or more target groups, use ForwardConfig instead.

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
